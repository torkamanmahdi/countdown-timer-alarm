import tkinter as tk
from tkinter import messagebox
import time
import threading
from playsound import playsound

# Function to play the police siren sound
def play_alarm():
    playsound('police_siren.mp3')  # Make sure you have a police_siren.mp3 file in the same directory

# Function to handle the countdown
def countdown(hours, minutes, seconds, alarm_id):
    total_seconds = hours * 3600 + minutes * 60 + seconds
    while total_seconds > 0:
        time.sleep(1)
        total_seconds -= 1
    messagebox.showinfo("Alarm Finished", f"Alarm {alarm_id} has finished!")
    play_alarm()

# Function to start the countdown in a separate thread
def start_countdown():
    try:
        hours = int(hours_entry.get())
        minutes = int(minutes_entry.get())
        seconds = int(seconds_entry.get())
        alarm_id = len(active_alarms) + 1
        active_alarms.append(alarm_id)
        countdown_thread = threading.Thread(target=countdown, args=(hours, minutes, seconds, alarm_id))
        countdown_thread.start()
        alarms_listbox.insert(tk.END, f"Alarm {alarm_id}: {hours}h {minutes}m {seconds}s")
    except ValueError:
        messagebox.showerror("Invalid Input", "Please enter valid numbers for hours, minutes, and seconds.")

# Create the main window
root = tk.Tk()
root.title("Countdown Timer with Alarm")

# Create and place the input fields and labels
tk.Label(root, text="Hours:").grid(row=0, column=0)
hours_entry = tk.Entry(root)
hours_entry.grid(row=0, column=1)

tk.Label(root, text="Minutes:").grid(row=1, column=0)
minutes_entry = tk.Entry(root)
minutes_entry.grid(row=1, column=1)

tk.Label(root, text="Seconds:").grid(row=2, column=0)
seconds_entry = tk.Entry(root)
seconds_entry.grid(row=2, column=1)

# Create and place the start button
start_button = tk.Button(root, text="Start Countdown", command=start_countdown)
start_button.grid(row=3, column=0, columnspan=2)

# Create and place the listbox to show active alarms
alarms_listbox = tk.Listbox(root)
alarms_listbox.grid(row=4, column=0, columnspan=2)

# List to keep track of active alarms
active_alarms = []

# Start the main loop
root.mainloop()
